node {
  name: "input_3d"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 80
        }
        dim {
          size: 13
        }
      }
    }
  }
}
node {
  name: "keep_prob"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000P\000\000\000\r\000\000\000"
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "input_3d"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "Reshape"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "rnn/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/range"
  op: "Range"
  input: "rnn/range/start"
  input: "rnn/Rank"
  input: "rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat"
  op: "ConcatV2"
  input: "rnn/concat/values_0"
  input: "rnn/range"
  input: "rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/transpose"
  op: "Transpose"
  input: "ExpandDims"
  input: "rnn/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Shape"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice"
  op: "StridedSlice"
  input: "rnn/Shape"
  input: "rnn/strided_slice/stack"
  input: "rnn/strided_slice/stack_1"
  input: "rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/Conv2DLSTMCellZeroState/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "P\000\000\000\r\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "rnn/Conv2DLSTMCellZeroState/ExpandDims"
  input: "rnn/Conv2DLSTMCellZeroState/Const"
  input: "rnn/Conv2DLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/zeros"
  op: "Fill"
  input: "rnn/Conv2DLSTMCellZeroState/concat"
  input: "rnn/Conv2DLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/ExpandDims_1"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/Conv2DLSTMCellZeroState/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "P\000\000\000\r\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/ExpandDims_2"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/Conv2DLSTMCellZeroState/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "P\000\000\000\r\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "rnn/Conv2DLSTMCellZeroState/ExpandDims_2"
  input: "rnn/Conv2DLSTMCellZeroState/Const_2"
  input: "rnn/Conv2DLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "rnn/Conv2DLSTMCellZeroState/concat_1"
  input: "rnn/Conv2DLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/ExpandDims_3"
  op: "ExpandDims"
  input: "rnn/strided_slice"
  input: "rnn/Conv2DLSTMCellZeroState/ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Conv2DLSTMCellZeroState/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "P\000\000\000\r\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/Shape_1"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_1"
  op: "StridedSlice"
  input: "rnn/Shape_1"
  input: "rnn/strided_slice_1/stack"
  input: "rnn/strided_slice_1/stack_1"
  input: "rnn/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/Shape_2"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/strided_slice_2"
  op: "StridedSlice"
  input: "rnn/Shape_2"
  input: "rnn/strided_slice_2/stack"
  input: "rnn/strided_slice_2/stack_1"
  input: "rnn/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/ExpandDims"
  op: "ExpandDims"
  input: "rnn/strided_slice_2"
  input: "rnn/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "P\000\000\000\r\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat_1"
  op: "ConcatV2"
  input: "rnn/ExpandDims"
  input: "rnn/Const"
  input: "rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/zeros"
  op: "Fill"
  input: "rnn/concat_1"
  input: "rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArray"
  op: "TensorArrayV3"
  input: "rnn/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 80
        }
        dim {
          size: 13
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "rnn/strided_slice_1"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 80
        }
        dim {
          size: 13
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "rnn/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "rnn/TensorArrayUnstack/Shape"
  input: "rnn/TensorArrayUnstack/strided_slice/stack"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "rnn/TensorArrayUnstack/range/start"
  input: "rnn/TensorArrayUnstack/strided_slice"
  input: "rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "rnn/TensorArray_1"
  input: "rnn/TensorArrayUnstack/range"
  input: "rnn/transpose"
  input: "rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/transpose"
      }
    }
  }
}
node {
  name: "rnn/Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/Maximum"
  op: "Maximum"
  input: "rnn/Maximum/x"
  input: "rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/Minimum"
  op: "Minimum"
  input: "rnn/strided_slice_1"
  input: "rnn/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/while/Enter"
  op: "Enter"
  input: "rnn/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_1"
  op: "Enter"
  input: "rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_2"
  op: "Enter"
  input: "rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_3"
  op: "Enter"
  input: "rnn/Conv2DLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Enter_4"
  op: "Enter"
  input: "rnn/Conv2DLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Merge"
  op: "Merge"
  input: "rnn/while/Enter"
  input: "rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/Merge_1"
  op: "Merge"
  input: "rnn/while/Enter_1"
  input: "rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/Merge_2"
  op: "Merge"
  input: "rnn/while/Enter_2"
  input: "rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/Merge_3"
  op: "Merge"
  input: "rnn/while/Enter_3"
  input: "rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/Merge_4"
  op: "Merge"
  input: "rnn/while/Enter_4"
  input: "rnn/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/Less"
  op: "Less"
  input: "rnn/while/Merge"
  input: "rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/Less/Enter"
  op: "Enter"
  input: "rnn/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/Less_1"
  op: "Less"
  input: "rnn/while/Merge_1"
  input: "rnn/while/Less_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/Less_1/Enter"
  op: "Enter"
  input: "rnn/Minimum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/LogicalAnd"
  op: "LogicalAnd"
  input: "rnn/while/Less"
  input: "rnn/while/Less_1"
}
node {
  name: "rnn/while/LoopCond"
  op: "LoopCond"
  input: "rnn/while/LogicalAnd"
}
node {
  name: "rnn/while/Switch"
  op: "Switch"
  input: "rnn/while/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge"
      }
    }
  }
}
node {
  name: "rnn/while/Switch_1"
  op: "Switch"
  input: "rnn/while/Merge_1"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_1"
      }
    }
  }
}
node {
  name: "rnn/while/Switch_2"
  op: "Switch"
  input: "rnn/while/Merge_2"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_2"
      }
    }
  }
}
node {
  name: "rnn/while/Switch_3"
  op: "Switch"
  input: "rnn/while/Merge_3"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_3"
      }
    }
  }
}
node {
  name: "rnn/while/Switch_4"
  op: "Switch"
  input: "rnn/while/Merge_4"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Merge_4"
      }
    }
  }
}
node {
  name: "rnn/while/Identity"
  op: "Identity"
  input: "rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/Identity_1"
  op: "Identity"
  input: "rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/Identity_2"
  op: "Identity"
  input: "rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/Identity_3"
  op: "Identity"
  input: "rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/Identity_4"
  op: "Identity"
  input: "rnn/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add"
  op: "Add"
  input: "rnn/while/Identity"
  input: "rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "rnn/while/TensorArrayReadV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\002\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3333333432674408
      }
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3333333432674408
      }
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 2
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "rnn/conv_lstm_cell/kernel"
  input: "rnn/conv_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/kernel/read"
  op: "Identity"
  input: "rnn/conv_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/concat/axis"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/concat"
  op: "ConcatV2"
  input: "rnn/while/TensorArrayReadV3"
  input: "rnn/while/Identity_4"
  input: "rnn/while/rnn/conv_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/Conv2D"
  op: "Conv2D"
  input: "rnn/while/rnn/conv_lstm_cell/concat"
  input: "rnn/while/rnn/conv_lstm_cell/Conv2D/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/Conv2D/Enter"
  op: "Enter"
  input: "rnn/conv_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/biases/Assign"
  op: "Assign"
  input: "rnn/conv_lstm_cell/biases"
  input: "rnn/conv_lstm_cell/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rnn/conv_lstm_cell/biases/read"
  op: "Identity"
  input: "rnn/conv_lstm_cell/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/add"
  op: "Add"
  input: "rnn/while/rnn/conv_lstm_cell/Conv2D"
  input: "rnn/while/rnn/conv_lstm_cell/add/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/add/Enter"
  op: "Enter"
  input: "rnn/conv_lstm_cell/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/Const"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/split/split_dim"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/split"
  op: "Split"
  input: "rnn/while/rnn/conv_lstm_cell/split/split_dim"
  input: "rnn/while/rnn/conv_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/add_1/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/add_1"
  op: "Add"
  input: "rnn/while/rnn/conv_lstm_cell/split:2"
  input: "rnn/while/rnn/conv_lstm_cell/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "rnn/while/rnn/conv_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/mul"
  op: "Mul"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid"
  input: "rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "rnn/while/rnn/conv_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/Tanh"
  op: "Tanh"
  input: "rnn/while/rnn/conv_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/mul_1"
  op: "Mul"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid_1"
  input: "rnn/while/rnn/conv_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/add_2"
  op: "Add"
  input: "rnn/while/rnn/conv_lstm_cell/mul"
  input: "rnn/while/rnn/conv_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "rnn/while/rnn/conv_lstm_cell/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "rnn/while/rnn/conv_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/rnn/conv_lstm_cell/mul_2"
  op: "Mul"
  input: "rnn/while/rnn/conv_lstm_cell/Tanh_1"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "rnn/while/Identity_1"
  input: "rnn/while/rnn/conv_lstm_cell/mul_2"
  input: "rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/mul_2"
      }
    }
  }
}
node {
  name: "rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "rnn/while/add_1/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/while/add_1"
  op: "Add"
  input: "rnn/while/Identity_1"
  input: "rnn/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/NextIteration"
  op: "NextIteration"
  input: "rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "rnn/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "rnn/while/rnn/conv_lstm_cell/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/NextIteration_4"
  op: "NextIteration"
  input: "rnn/while/rnn/conv_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/Exit"
  op: "Exit"
  input: "rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/Exit_1"
  op: "Exit"
  input: "rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/while/Exit_2"
  op: "Exit"
  input: "rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/Exit_3"
  op: "Exit"
  input: "rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/while/Exit_4"
  op: "Exit"
  input: "rnn/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "rnn/TensorArray"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/range"
  op: "Range"
  input: "rnn/TensorArrayStack/range/start"
  input: "rnn/TensorArrayStack/TensorArraySizeV3"
  input: "rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
}
node {
  name: "rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "rnn/TensorArray"
  input: "rnn/TensorArrayStack/range"
  input: "rnn/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 80
        }
        dim {
          size: 13
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "rnn/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "P\000\000\000\r\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "rnn/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "rnn/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rnn/range_1"
  op: "Range"
  input: "rnn/range_1/start"
  input: "rnn/Rank_1"
  input: "rnn/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/concat_2/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "rnn/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rnn/concat_2"
  op: "ConcatV2"
  input: "rnn/concat_2/values_0"
  input: "rnn/range_1"
  input: "rnn/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rnn/transpose_1"
  op: "Transpose"
  input: "rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "rnn/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\020\004\000\000"
      }
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "rnn/while/Exit_3"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\004\000\000\350\003\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05423261597752571
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05423261597752571
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1040
        }
        dim {
          size: 1000
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/kernel/Assign"
  op: "Assign"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/kernel/read"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Fill"
  input: "dense/bias/Initializer/zeros/shape_as_tensor"
  input: "dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1000
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense/bias/Assign"
  op: "Assign"
  input: "dense/bias"
  input: "dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense/bias/read"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "Reshape_1"
  input: "dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Sigmoid"
  op: "Sigmoid"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\350\003\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04898979514837265
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04898979514837265
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_1/kernel/Initializer/random_uniform/max"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_1/kernel/Initializer/random_uniform/mul"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1000
        }
        dim {
          size: 1500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1500
      }
    }
  }
}
node {
  name: "dense_1/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias/Initializer/zeros"
  op: "Fill"
  input: "dense_1/bias/Initializer/zeros/shape_as_tensor"
  input: "dense_1/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dense/Sigmoid"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Sigmoid"
  op: "Sigmoid"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ground_truth_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 1500
        }
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/zeros_like"
  op: "ZerosLike"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/GreaterEqual"
  op: "GreaterEqual"
  input: "dense_1/Sigmoid"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/Select"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/GreaterEqual"
  input: "dense_1/Sigmoid"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/Neg"
  op: "Neg"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/Select_1"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/GreaterEqual"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Neg"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/mul"
  op: "Mul"
  input: "dense_1/Sigmoid"
  input: "ground_truth_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/sub"
  op: "Sub"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Select"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/Exp"
  op: "Exp"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy/Log1p"
  op: "Log1p"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/xentropy"
  op: "Add"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/sub"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "loss/sigmoid_cross_entropy_loss/ToFloat_1/x"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Mul"
  op: "Mul"
  input: "loss/sigmoid_cross_entropy_loss/xentropy"
  input: "loss/sigmoid_cross_entropy_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Const"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Sum"
  op: "Sum"
  input: "loss/sigmoid_cross_entropy_loss/Mul"
  input: "loss/sigmoid_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/Equal/y"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/Equal"
  op: "Equal"
  input: "loss/sigmoid_cross_entropy_loss/ToFloat_1/x"
  input: "loss/sigmoid_cross_entropy_loss/num_present/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/zeros_like/Const"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/zeros_like"
  op: "Fill"
  input: "loss/sigmoid_cross_entropy_loss/num_present/zeros_like/shape_as_tensor"
  input: "loss/sigmoid_cross_entropy_loss/num_present/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/ones_like/Shape"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/ones_like/Const"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/ones_like"
  op: "Fill"
  input: "loss/sigmoid_cross_entropy_loss/num_present/ones_like/Shape"
  input: "loss/sigmoid_cross_entropy_loss/num_present/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/Select"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/num_present/Equal"
  input: "loss/sigmoid_cross_entropy_loss/num_present/zeros_like"
  input: "loss/sigmoid_cross_entropy_loss/num_present/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/shape"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  input: "^loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  input: "^loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  op: "Fill"
  input: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/ones_like/Shape"
  input: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights"
  op: "Mul"
  input: "loss/sigmoid_cross_entropy_loss/num_present/Select"
  input: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present/Const"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/num_present"
  op: "Sum"
  input: "loss/sigmoid_cross_entropy_loss/num_present/broadcast_weights"
  input: "loss/sigmoid_cross_entropy_loss/num_present/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Const_1"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Sum_1"
  op: "Sum"
  input: "loss/sigmoid_cross_entropy_loss/Sum"
  input: "loss/sigmoid_cross_entropy_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Greater/y"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Greater"
  op: "Greater"
  input: "loss/sigmoid_cross_entropy_loss/num_present"
  input: "loss/sigmoid_cross_entropy_loss/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Equal/y"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Equal"
  op: "Equal"
  input: "loss/sigmoid_cross_entropy_loss/num_present"
  input: "loss/sigmoid_cross_entropy_loss/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/ones_like/Shape"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/ones_like/Const"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/ones_like"
  op: "Fill"
  input: "loss/sigmoid_cross_entropy_loss/ones_like/Shape"
  input: "loss/sigmoid_cross_entropy_loss/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/Select"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/Equal"
  input: "loss/sigmoid_cross_entropy_loss/ones_like"
  input: "loss/sigmoid_cross_entropy_loss/num_present"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/div"
  op: "RealDiv"
  input: "loss/sigmoid_cross_entropy_loss/Sum_1"
  input: "loss/sigmoid_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/zeros_like/Const"
  op: "Const"
  input: "^loss/sigmoid_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/zeros_like"
  op: "Fill"
  input: "loss/sigmoid_cross_entropy_loss/zeros_like/shape_as_tensor"
  input: "loss/sigmoid_cross_entropy_loss/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/sigmoid_cross_entropy_loss/value"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/Greater"
  input: "loss/sigmoid_cross_entropy_loss/div"
  input: "loss/sigmoid_cross_entropy_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss_1"
      }
    }
  }
}
node {
  name: "loss_1"
  op: "ScalarSummary"
  input: "loss_1/tags"
  input: "loss/sigmoid_cross_entropy_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/learning_rate_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "train/gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "train/gradients/Fill"
  op: "Fill"
  input: "train/gradients/Shape"
  input: "train/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train/gradients/f_count_1"
  op: "Enter"
  input: "train/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge"
  op: "Merge"
  input: "train/gradients/f_count_1"
  input: "train/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Switch"
  op: "Switch"
  input: "train/gradients/Merge"
  input: "rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Add/y"
  op: "Const"
  input: "^rnn/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/Add"
  op: "Add"
  input: "train/gradients/Switch:1"
  input: "train/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/NextIteration"
  op: "NextIteration"
  input: "train/gradients/Add"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPushV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/f_count_2"
  op: "Exit"
  input: "train/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train/gradients/b_count_1"
  op: "Enter"
  input: "train/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/Merge_1"
  op: "Merge"
  input: "train/gradients/b_count_1"
  input: "train/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "train/gradients/Merge_1"
  input: "train/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "train/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/b_count_2"
  op: "LoopCond"
  input: "train/gradients/GreaterEqual"
}
node {
  name: "train/gradients/Switch_1"
  op: "Switch"
  input: "train/gradients/Merge_1"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Sub"
  op: "Sub"
  input: "train/gradients/Switch_1:1"
  input: "train/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/NextIteration_1"
  op: "NextIteration"
  input: "train/gradients/Sub"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/b_count_3"
  op: "Exit"
  input: "train/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/zeros_like/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/zeros_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/zeros_like"
  op: "Fill"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/zeros_like/shape_as_tensor"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/Select"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/Greater"
  input: "train/gradients/Fill"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/Select_1"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/Greater"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/zeros_like"
  input: "train/gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/Select"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/Select_1"
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/Select"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/Select"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/Select_1"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/Select_1"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Shape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/RealDiv"
  op: "RealDiv"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "loss/sigmoid_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Sum"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/RealDiv"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Neg"
  op: "Neg"
  input: "loss/sigmoid_cross_entropy_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Neg"
  input: "loss/sigmoid_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/RealDiv_1"
  input: "loss/sigmoid_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/mul"
  op: "Mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Sum_1"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Reshape_1"
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Reshape_1"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/div_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_1_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_1_grad/Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_1_grad/Tile"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Tile"
  op: "Tile"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Shape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/mul"
  op: "Mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Tile"
  input: "loss/sigmoid_cross_entropy_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/mul_1"
  op: "Mul"
  input: "loss/sigmoid_cross_entropy_loss/xentropy"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/mul_1"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Sum_1"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Reshape_1"
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Reshape_1"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Shape_1"
  op: "Shape"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Shape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Sum"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Sum_1"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Reshape_1"
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Reshape_1"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Shape"
  op: "Shape"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Shape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Sum"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Neg"
  op: "Neg"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Neg"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Reshape_1"
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Reshape_1"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Log1p_grad/add/x"
  op: "Const"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/control_dependency_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Log1p_grad/add"
  op: "Add"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Log1p_grad/add/x"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Log1p_grad/mul"
  op: "Mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy_grad/tuple/control_dependency_1"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/GreaterEqual"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select_1"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/GreaterEqual"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/zeros_like"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select_1"
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select_1"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Shape"
  op: "Shape"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000\334\005\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Shape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/mul"
  op: "Mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/control_dependency_1"
  input: "ground_truth_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/mul_1"
  op: "Mul"
  input: "dense_1/Sigmoid"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/mul_1"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Sum_1"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Reshape"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Reshape_1"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Exp_grad/mul"
  op: "Mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Log1p_grad/mul"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/Select"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/GreaterEqual"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Exp_grad/mul"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/Select_1"
  op: "Select"
  input: "loss/sigmoid_cross_entropy_loss/xentropy/GreaterEqual"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/zeros_like"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/Select"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/Select_1"
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/Select"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/Select_1"
  input: "^train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Neg_grad/Neg"
  op: "Neg"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/AddN"
  op: "AddN"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/mul_grad/tuple/control_dependency"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_1_grad/tuple/control_dependency_1"
  input: "train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/loss/sigmoid_cross_entropy_loss/xentropy/Select_grad/Select"
      }
    }
  }
}
node {
  name: "train/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "dense_1/Sigmoid"
  input: "train/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  input: "^train/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train/gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  input: "^train/gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "train/gradients/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "train/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense/Sigmoid"
  input: "train/gradients/dense_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense_1/MatMul_grad/MatMul"
  input: "^train/gradients/dense_1/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/dense_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense_1/MatMul_grad/MatMul"
  input: "^train/gradients/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_1/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "train/gradients/dense_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense_1/MatMul_grad/MatMul_1"
  input: "^train/gradients/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense_1/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "train/gradients/dense/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "dense/Sigmoid"
  input: "train/gradients/dense_1/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train/gradients/dense/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train/gradients/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense/Sigmoid_grad/SigmoidGrad"
  input: "^train/gradients/dense/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train/gradients/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense/Sigmoid_grad/SigmoidGrad"
  input: "^train/gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
}
node {
  name: "train/gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense/BiasAdd_grad/BiasAddGrad"
  input: "^train/gradients/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "train/gradients/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train/gradients/dense/BiasAdd_grad/tuple/control_dependency"
  input: "dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/dense/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "Reshape_1"
  input: "train/gradients/dense/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/dense/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/dense/MatMul_grad/MatMul"
  input: "^train/gradients/dense/MatMul_grad/MatMul_1"
}
node {
  name: "train/gradients/dense/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/dense/MatMul_grad/MatMul"
  input: "^train/gradients/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "train/gradients/dense/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/dense/MatMul_grad/MatMul_1"
  input: "^train/gradients/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/dense/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "train/gradients/Reshape_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/dense/MatMul_grad/tuple/control_dependency"
  input: "train/gradients/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/zeros"
  op: "Fill"
  input: "train/gradients/zeros/shape_as_tensor"
  input: "train/gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/zeros_like"
  op: "ZerosLike"
  input: "rnn/while/Exit_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train/gradients/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "train/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train/gradients/rnn/while/Exit_3_grad/b_exit"
  input: "train/gradients/rnn/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "train/gradients/rnn/while/Exit_4_grad/b_exit"
  input: "train/gradients/rnn/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train/gradients/rnn/while/Switch_3_grad/b_switch"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/Merge_3_grad/Switch"
}
node {
  name: "train/gradients/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/Merge_3_grad/Switch"
  input: "^train/gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/Merge_3_grad/Switch:1"
  input: "^train/gradients/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "train/gradients/rnn/while/Switch_4_grad/b_switch"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/Merge_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/Merge_4_grad/Switch"
}
node {
  name: "train/gradients/rnn/while/Merge_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/Merge_4_grad/Switch"
  input: "^train/gradients/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/Merge_4_grad/Switch:1"
  input: "^train/gradients/rnn/while/Merge_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train/gradients/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/Enter_4_grad/Exit"
  op: "Exit"
  input: "train/gradients/rnn/while/Merge_4_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/b_sync"
  op: "ControlTrigger"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train/gradients/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/Enter"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid_2"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train/gradients/rnn/while/Merge_4_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "rnn/while/rnn/conv_lstm_cell/Tanh_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Sum_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/AddN_1"
  op: "AddN"
  input: "train/gradients/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Sum"
  op: "Sum"
  input: "train/gradients/AddN_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/AddN_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Sum_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Reshape_1"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Reshape_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/control_dependency"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/Enter"
  input: "rnn/while/Identity_3"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/Enter"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Sum_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Reshape_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Shape_1"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/Enter_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Shape_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/control_dependency_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/Enter"
  input: "rnn/while/rnn/conv_lstm_cell/Tanh"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "rnn/while/rnn/conv_lstm_cell/Sigmoid_1"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Sum_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Sum_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Reshape_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Tanh_grad/TanhGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Shape"
  op: "Shape"
  input: "rnn/while/rnn/conv_lstm_cell/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Shape"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/split_grad/concat"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/split_grad/concat"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Sum_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Reshape"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Reshape_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/Enter_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/rnn/conv_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/Enter"
  input: "rnn/while/rnn/conv_lstm_cell/concat"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "rnn/conv_lstm_cell/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Const"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\002\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/Enter_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/ShapeN/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Const"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Conv2DBackpropInput"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Conv2DBackpropFilter"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Conv2DBackpropInput"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Conv2DBackpropFilter"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/b_acc_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/Switch:1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/mod/Const"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train/gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Shape"
  op: "Shape"
  input: "rnn/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN"
  op: "ShapeN"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/f_acc"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPushV2"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/Enter"
  input: "rnn/while/TensorArrayReadV3"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/f_acc_1"
  op: "StackV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/while/Identity_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/Enter_1"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPushV2_1"
  op: "StackPushV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/Enter_1"
  input: "rnn/while/Identity_4"
  input: "^train/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2_1"
  op: "StackPopV2"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  input: "^train/gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/StackPopV2_1/Enter"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/mod"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/tuple/control_dependency"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ConcatOffset"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/tuple/control_dependency"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Slice"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Slice"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Slice"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Slice_1"
  input: "^train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 2
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train/gradients/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/b_acc_1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/Switch"
  op: "Switch"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/b_acc_2"
  input: "train/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/Add"
  op: "Add"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/Switch:1"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/gradients/rnn/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train/GradientDescent/update_rnn/conv_lstm_cell/kernel/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "rnn/conv_lstm_cell/kernel"
  input: "train/learning_rate_input"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/Conv2D/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/GradientDescent/update_rnn/conv_lstm_cell/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "rnn/conv_lstm_cell/biases"
  input: "train/learning_rate_input"
  input: "train/gradients/rnn/while/rnn/conv_lstm_cell/add/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/GradientDescent/update_dense/kernel/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "dense/kernel"
  input: "train/learning_rate_input"
  input: "train/gradients/dense/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/GradientDescent/update_dense/bias/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "dense/bias"
  input: "train/learning_rate_input"
  input: "train/gradients/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/GradientDescent/update_dense_1/kernel/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "dense_1/kernel"
  input: "train/learning_rate_input"
  input: "train/gradients/dense_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/GradientDescent/update_dense_1/bias/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "dense_1/bias"
  input: "train/learning_rate_input"
  input: "train/gradients/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train/GradientDescent"
  op: "NoOp"
  input: "^train/GradientDescent/update_rnn/conv_lstm_cell/kernel/ApplyGradientDescent"
  input: "^train/GradientDescent/update_rnn/conv_lstm_cell/biases/ApplyGradientDescent"
  input: "^train/GradientDescent/update_dense/kernel/ApplyGradientDescent"
  input: "^train/GradientDescent/update_dense/bias/ApplyGradientDescent"
  input: "^train/GradientDescent/update_dense_1/kernel/ApplyGradientDescent"
  input: "^train/GradientDescent/update_dense_1/bias/ApplyGradientDescent"
}
node {
  name: "global_step/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Fill"
  input: "global_step/Initializer/zeros/shape_as_tensor"
  input: "global_step/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "global_step/read"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "global_step"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "dense/bias"
        string_val: "dense/kernel"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "global_step"
        string_val: "rnn/conv_lstm_cell/biases"
        string_val: "rnn/conv_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dense/bias"
  input: "dense/kernel"
  input: "dense_1/bias"
  input: "dense_1/kernel"
  input: "global_step"
  input: "rnn/conv_lstm_cell/biases"
  input: "rnn/conv_lstm_cell/kernel"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "dense/bias"
        string_val: "dense/kernel"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "global_step"
        string_val: "rnn/conv_lstm_cell/biases"
        string_val: "rnn/conv_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dense/bias"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dense/kernel"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dense_1/bias"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dense_1/kernel"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "rnn/conv_lstm_cell/biases"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "rnn/conv_lstm_cell/kernel"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rnn/conv_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^rnn/conv_lstm_cell/kernel/Assign"
  input: "^rnn/conv_lstm_cell/biases/Assign"
  input: "^dense/kernel/Assign"
  input: "^dense/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^global_step/Assign"
}
versions {
  producer: 26
}
